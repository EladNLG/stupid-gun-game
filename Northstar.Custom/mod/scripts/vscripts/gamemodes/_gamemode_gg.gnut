global function GamemodeGG_Init
global bool gnsOn
global function UpdateLoadout

array<string> playerHSNames = [] //players that have HouseFlies enabled
array<string> adminNames = ["admin1", "admin2","Neinguar"] // admins
bool hsOn
table<entity, int> SaveScore 

// highlight best player
// 50% hp for good player
struct {
	string score_leader_highlight = "enemy_boss_bounty" // highlight effect applied to person in 1st place
	string offhand_weapon = "mp_weapon_thermite_grenade" // offhand weapon

	bool reset_pulse_blade_cooldown_on_pulse_blade_kill
	bool softball_enabled

	int wme_kill_value
	int softball_kill_value
	int offhand_kill_value
	int reset_kill_value
	int melee_kill_value
} file

void function GamemodeGG_Init()
{
	//house flies commands
	AddClientCommandCallback("hs", EnablehsCMD) // this command toggles hs to all or a certain players syntax: hs <name/all> 0/1
	AddClientCommandCallback("gns", EnablehsGNS)
	AddClientCommandCallback("health", ShowHealthCMD)
	//AddClientCommandCallback("switch",EnableSwitchCMD)
	//AddClientCommandCallback("UltraTroll",EnableTrollCMD)

	SetSpawnpointGamemodeOverride( FFA )

	SetShouldUseRoundWinningKillReplay( true )
	ClassicMP_ForceDisableEpilogue( true )
	SetLoadoutGracePeriodEnabled( false ) // prevent modifying loadouts with grace period
	SetWeaponDropsEnabled( false )
	Riff_ForceTitanAvailability( eTitanAvailability.Never )
	Riff_ForceBoostAvailability( eBoostAvailability.Disabled )

	AddCallback_OnPlayerRespawned( OnPlayerRespawned )
	AddCallback_OnPlayerKilled( OnPlayerKilled )
	AddCallback_OnClientDisconnected(OnPlayerDisconnected)

	AddCallback_GameStateEnter( eGameState.WinnerDetermined, OnWinnerDetermined )

	AddCallback_GGEarnMeterFull( OnGGEarnMeterFilled )

    // CUSTOM
    AddCallback_OnClientConnected(OnClientConnected)

	if( RandomInt( 100 ) == 1 ) // easter egg (enables house flies for everyone)
	{
		hsOn = true;
		foreach( entity player in GetPlayerArray() )
			playerHSNames.append( player.GetPlayerName() )
	}
	else
	{
		hsOn = false;
	}
	gnsOn = true // on by default, ppl seem to like it 
	try
	{
		if ( GetCurrentPlaylistVarInt( "scorelimit", GetGunGameWeapons().len() ) != GetGunGameWeapons().len() )
			SetPlaylistVarOverride( "scorelimit", GetGunGameWeapons().len().tostring() )
	}
	catch ( ex ) {}
}
bool function ShowHealthCMD (entity player, array<string> args){
	try{
	if(args[0]==""){
		 Chat_ServerPrivateMessage(player,"Your current max health is at "+player.GetMaxHealth()+"HP and your current health is at "+player.GetHealth()+"HP",false)
		return true
	}else{
		 string searchedPlayer = args[0].tolower()
		foreach(entity SearchPlayers in GetPlayerArray()){
		  if( SearchPlayers.GetPlayerName().tolower() == searchedPlayer)
		  Chat_ServerPrivateMessage(player , SearchPlayers.GetPlayerName()+"s current max health is at "+SearchPlayers.GetMaxHealth()+"HP and their current health is at "+SearchPlayers.GetHealth()+"HP",false)
		  return true
		}
	Chat_ServerPrivateMessage(player , "Player name could not be found, check the spelling" ,false)
	return true
		}
	Chat_ServerPrivateMessage(player , "how did you reach this code??????" ,false)
	return true
	}catch(ex){}
	return false
}
bool function EnablehsGNS (entity player, array < string > args)
{
if(adminNames.find(player.GetPlayerName())==-1)
	return true
try{
	if (args[0]== "1"){
		gnsOn = true
		foreach(entity playerInArray in GetPlayerArray())
			UpdateLoadout(playerInArray)
	return true
	}
	if(args[0]=="0"){
		gnsOn = false
		foreach(entity playerInArray in GetPlayerArray())
			UpdateLoadout(playerInArray)
	return true
	}
	
}
catch(ex){}
return false
}

bool function EnablehsCMD( entity player, array < string > args )
{
    #if SERVER
	string playerName = player.GetPlayerName()
	if( adminNames.find(playerName) != -1) // checks if player is an admin
	{
		if(args.len() == 0) // if only hs entered
			{
				SendHudMessage(player, "dumb!!! syntax: hs <name|all> <0/1>", -1, 0.4, 255, 200, 200, 0, 0, 5, 0.15)
				return true
			}
		switch ( args[0] )
		{
			// if has all entered
			case("all"):
				if(args[1] == "1")
				{
					hsOn = true;
					foreach( entity pl in GetPlayerArray() )
					{
						if( playerHSNames.find( pl.GetPlayerName() ) == -1 )
						{
							playerHSNames.append( pl.GetPlayerName() )
							UpdateLoadout(pl)
							SendHudMessage(player, "Meleeport is active for everyone due to admin abuse", -1, 0.4, 255, 200, 200, 0, 0, 5, 0.15)
						}
					}
				}
				else if(args[1] == "0")
					{
						hsOn = false;
						playerHSNames.clear()
						foreach( entity pl in GetPlayerArray() )
							UpdateLoadout(pl)
							SendHudMessage(player, "Meleeport is GONE for everyone everyone hate on the admin", -1, 0.4, 255, 200, 200, 0, 0, 5, 0.15)
					}
				// if something that isnt 1 or 0 was entered
				else
					SendHudMessage(player, "dumb!!! syntax: hs <name|all> <0/1>", -1, 0.4, 255, 200, 200, 0, 0, 5, 0.15)
				break;

			// if a 0 was entered in stead of a player's name
			case("0"):
				SendHudMessage(player, "dumb!!! syntax: hs <name|all> <0/1>", -1, 0.4, 255, 200, 200, 0, 0, 5, 0.15)
				break;

			 // if a 1 was entered in stead of a player's name
			case("1"):
				SendHudMessage(player, "dumb!!! syntax: hs <name|all> <0/1>", -1, 0.4, 255, 200, 200, 0, 0, 5, 0.15)
				break;

			default:
				bool found = false
				int playerIndex
				// checks if the player entered is connected
				for( int i = 0 ; i < GetPlayerArray().len() ; i++ )
				{
					entity pl = GetPlayerArray()[i]
					if( pl.GetPlayerName() == args[0] )
					{
						found = true
						playerIndex = i
					}
				}
				if( found )
					{
						if( args[1] == "0" )
						{
							if( playerHSNames.find(args[0]) != -1 )
							{
								playerHSNames.remove( playerHSNames.find(args[0]) )
								UpdateLoadout( GetPlayerArray()[playerIndex] )
							}
						}
						else if( args[1] == "1")
						{
							if( playerHSNames.find(args[0]) == -1 )
							{
								playerHSNames.append( args[0] )
								UpdateLoadout( GetPlayerArray()[playerIndex] )
							}
						}
						else
							SendHudMessage(player, "dumb!!! syntax: hs <name|all> <0/1>", -1, 0.4, 255, 200, 200, 0, 0, 5, 0.15)
					}
				else
					SendHudMessage(player, "wrong syntax or player not found", -1, 0.4, 255, 200, 200, 0, 0, 5, 0.15)
				break;
		}
	}
    #endif
    return true
}

void function OnPlayerDisconnected(entity player)
{	
	SaveScore[player] <- GameRules_GetTeamScore( player.GetTeam() )
	
	// this prevents a new player to get someone who's left's score
	AddTeamScore( player.GetTeam(), -GameRules_GetTeamScore( player.GetTeam() ))

	if (GetWinningPlayer() == player)
		thread CheckNewHighlight(player)

	if(playerWantingToActivateGNS.find(player)!=-1)
		playerWantingToActivateGNS.remove(playerWantingToActivateGNS.find(player))
	if(playerWantingToDeactivateGNS.find(player)!=-1)
		playerWantingToDeactivateGNS.remove(playerWantingToDeactivateGNS.find(player))

	int is_player_in_hard_mode = isPlayerInHardModeInt(player)
	if(is_player_in_hard_mode==-1)
		return
	switch(is_player_in_hard_mode){
		case(1): HMLightPlayers.remove(HMLightPlayers.find(player))
		case(2): HMMediumPlayers.remove(HMMediumPlayers.find(player))
		case(3): HMExtremePlayers.remove(HMExtremePlayers.find(player))
	}
}

void function OnPlayerRespawned( entity player )
{
    StatusEffect_AddTimed( attacker, eStatusEffect.speed_boost, 0.4, 4.25, 0.25) 
	UpdateLoadout( player )
	thread OnPlayerRespawned_Threaded( player )

	if(HMLightPlayers.find(player)!=-1){
		player.SetMaxHealth(50)
      	player.SetHealth(player.GetMaxHealth())
	}
	if(HMMediumPlayers.find(player)!=-1){
		player.SetMaxHealth(25)
      	player.SetHealth(player.GetMaxHealth())
	}
	if(HMExtremePlayers.find(player)!=-1){
		player.SetMaxHealth(1)
      	player.SetHealth(player.GetMaxHealth())
	}

	/*
	if(EasyModePlayer.find(player)!=-1){
		player.SetMaxHealth(125)
		player.SetHealth(player.GetMaxHealth())
	}
	*/
	if(hsOn)
		SendHudMessage(player, "Meleeport is active for everyone", -1, 0.4, 255, 200, 200, 0, 0, 5, 0.15)
	if (player == GetWinningPlayer())
		SetHighlight( player )
}

void function OnPlayerRespawned_Threaded( entity player )
{
	// bit of a hack, need to rework earnmeter code to have better support for completely disabling it
	// rn though this just waits for earnmeter code to set the mode before we set it back
	WaitFrame()
	if ( IsValid( player ) )
		PlayerEarnMeter_SetMode( player, eEarnMeterMode.DISABLED )
}

void function OnPlayerKilled( entity victim, entity attacker, var damageInfo )
{
	if ( !victim.IsPlayer() || !attacker.IsPlayer() || GetGameState() != eGameState.Playing )
		return

	if ( attacker == victim ) // suicide
	{
		string message = victim.GetPlayerName() + " committed suicide. \n Press F in the chat"
		foreach ( entity player in GetPlayerArray() )
			SendHudMessage( player, message, -1, 0.4, 255, 0, 0, 0, 0, 3, 0.15 )

		DeRank( victim )
	}
	else
	{
        // Heal & stim attacker after kill
        if (IsAlive(attacker)) {
            attacker.SetHealth(attacker.GetMaxHealth())
			StatusEffect_AddTimed( attacker, eStatusEffect.speed_boost, 0.4, 4.25, 0.25) 
        }
		if( DamageInfo_GetDamageSourceIdentifier( damageInfo ) == eDamageSourceId.mp_weapon_grenade_sonar && gnsOn ){
			if(GameRules_GetTeamScore(victim.GetTeam())>=10){
				AddTeamScore( victim.GetTeam(), -GetPBScoreRemove(victim))
			}
			else{
				 AddTeamScore( victim.GetTeam(), -GameRules_GetTeamScore( victim.GetTeam() ))
			}
			 victim.SetPlayerGameStat( PGS_ASSAULT_SCORE, GameRules_GetTeamScore( victim.GetTeam() )) //first argument is what to change, 2nd is what to change it to
			 foreach( entity player in GetPlayerArray() )
			 	SendHudMessage(player, victim.GetPlayerName()+" got bankrupted by "+attacker.GetPlayerName(), -1, 0.4, 255, 200, 200, 0, 0, 5, 0.15)
		}

		if ( DamageInfo_GetDamageSourceIdentifier( damageInfo ) != eDamageSourceId.melee_pilot_emptyhanded )
		{
			float percentageReward = GetCurrentPlaylistVarFloat( "gg_kill_reward", 1.0 )
			string scoreEvent = "KillPilot"

			if ( DamageInfo_GetDamageSourceIdentifier( damageInfo ) == eDamageSourceId.human_execution )
			{
				string message = victim.GetPlayerName() + " got executed."
				foreach ( entity player in GetPlayerArray() )
					SendHudMessage( player, message, -1, 0.4, 255, 0, 0, 0, 0, 3, 0.15 )

				DeRank( victim )

				percentageReward = GetCurrentPlaylistVarFloat( "gg_execution_reward", 1.0 )
				scoreEvent = "Execution"
			}
			if( GameRules_GetTeamScore( attacker.GetTeam() ) == GetGunGameWeapons().len()-2 )
			{
				playerHSNames.append( attacker.GetPlayerName() )
			}
			Reward( attacker, victim, scoreEvent, percentageReward )
			
			
		}
		else if( playerHSNames.find( attacker.GetPlayerName() ) == -1 ){
			//Neinguars mod to punish melee users lol
			DeRank( attacker )
			SendHudMessage( attacker, "Don't melee other pilots, you'll get demoted!", -1, 0.4, 255, 0, 0, 0, 0, 3, 0.15 )
		}

		if (attacker == GetWinningPlayer())
			SetHighlight( attacker )
	}

	table<int, bool> alreadyAssisted
	foreach( DamageHistoryStruct attackerInfo in victim.e.recentDamageHistory )
	{
        if ( !IsValid( attackerInfo.attacker ) || !attackerInfo.attacker.IsPlayer() || attackerInfo.attacker == victim )
                    continue

		if( attackerInfo.attacker != attacker && !( attackerInfo.attacker.GetEncodedEHandle() in alreadyAssisted ) )
		{
			if ( attackerInfo.damageSourceId != eDamageSourceId.melee_pilot_emptyhanded ) {
				alreadyAssisted[attackerInfo.attacker.GetEncodedEHandle()] <- true

				Reward( attackerInfo.attacker, victim, "PilotAssist", GetCurrentPlaylistVarFloat( "gg_assist_reward", 0.0 ) )
			}
		}
	}
	if( GameRules_GetTeamScore(attacker.GetTeam()) > GetGunGameWeapons().len())
		SetRoundWinningKillReplayAttacker(attacker)
		
}

void function Reward( entity player, entity victim, string scoreEvent, float percentageReward )
{
	percentageReward = clamp(percentageReward, 0.0, 1.0)
	Sv_GGEarnMeter_AddPercentage( player, percentageReward )
	Remote_CallFunction_NonReplay( player, "ServerCallback_ScoreEvent", GetScoreEvent(scoreEvent).eventId, 0, eEventDisplayType.MEDAL, victim.GetEncodedEHandle(), 0.0, percentageReward)
}

void function DeRank( entity player )
{
	Sv_GGEarnMeter_SetPercentage( player, 0.0 )

	if ( GameRules_GetTeamScore( player.GetTeam() ) != 0 )
	{
		AddTeamScore( player.GetTeam(), -1 ) // get absolutely fucking destroyed lol
		player.AddToPlayerGameStat( PGS_ASSAULT_SCORE, -1 )
		UpdateLoadout( player )
	}
}

bool function OnGGEarnMeterFilled( entity player )
{
	AddTeamScore( player.GetTeam(), 1 )
	player.AddToPlayerGameStat( PGS_ASSAULT_SCORE, 1 )
	UpdateLoadout( player )

	int currentScore = GameRules_GetTeamScore( player.GetTeam() )
	int maxScore = GetGunGameWeapons().len()

	return currentScore >= maxScore
}

void function UpdateLoadout( entity player )
{
	// todo: honestly, this should be reworked to use PilotLoadoutDefs instead of directly modifying weapons and shit

	int currentWeaponIndex = GameRules_GetTeamScore( player.GetTeam() )
	array<GunGameWeapon> weapons = GetGunGameWeapons()

	if ( currentWeaponIndex >= weapons.len() )
		currentWeaponIndex = weapons.len() - 1

	if ( currentWeaponIndex > weapons.len() - 3 ) // play end of game music for special or last few weapons
		PlayMusicToAll( eMusicPieceID.LEVEL_LAST_MINUTE ) // this *shouldn't* overlap if done multiple times

	GunGameWeapon weapon = weapons[ currentWeaponIndex ]

	foreach ( entity weapon in player.GetMainWeapons() )
		player.TakeWeaponNow( weapon.GetWeaponClassName() )

	foreach ( entity weapon in player.GetOffhandWeapons() )
		player.TakeWeaponNow( weapon.GetWeaponClassName() )

	if ( weapon.offhandSlot != -1)
	{
		player.GiveOffhandWeapon( weapon.weapon, weapon.offhandSlot, weapon.mods )

		if( playerHSNames.find( player.GetPlayerName() ) == -1 )
			player.GiveOffhandWeapon( "melee_pilot_kunai", OFFHAND_MELEE, [ "allow_as_primary" ] )
		else
			player.GiveOffhandWeapon( "melee_pilot_emptyhanded", OFFHAND_MELEE, [ "allow_as_primary" ] )
			
		player.SetActiveWeaponByName( player.GetOffhandWeapon( OFFHAND_MELEE ).GetWeaponClassName() ) // Let the player use the melee in the primary slot, and then force equip it. Effectively gives them an empty hand.
	}
	else
	{
		player.GiveWeapon( weapon.weapon, weapon.mods )

		if( playerHSNames.find( player.GetPlayerName() ) == -1 )
			player.GiveOffhandWeapon( "melee_pilot_kunai", OFFHAND_MELEE )
		else
			player.GiveOffhandWeapon( "melee_pilot_emptyhanded", OFFHAND_MELEE )
	}

    // Grapple
	if( gnsOn && weapon.offhandSlot != 0 )
 		player.GiveOffhandWeapon ("mp_weapon_grenade_sonar", OFFHAND_TITAN_CENTER, [])

	if( gnsOn && weapon.offhandSlot == 0 && weapon.weapon != "mp_weapon_grenade_sonar" ){
  		player.GiveOffhandWeapon( "mp_ability_grapple", OFFHAND_LEFT )
		player.GiveOffhandWeapon ("mp_weapon_grenade_sonar", OFFHAND_TITAN_CENTER, [])
	}
	else
  		player.GiveOffhandWeapon( "mp_ability_grapple", OFFHAND_LEFT )
}

void function OnWinnerDetermined()
{

	SetRespawnsEnabled( false )
	SetKillcamsEnabled( false )

	playerHSNames.clear()
}

// CUSTOM
void function OnClientConnected(entity player) {
	if(player in SaveScore){
		AddTeamScore( player.GetTeam(), SaveScore[player] )
		player.AddToPlayerGameStat( PGS_ASSAULT_SCORE, SaveScore[player] )
		Chat_ServerPrivateMessage(player, "Your score has been restored", false)
		printt("Score of "+player.GetPlayerName()+" has been restored")
	}
    printt("[GUN GAME] OnClientConnected", player, "team", player.GetTeam())
	if(hsOn) // if house flies is enabled add player to hsplayers array
		playerHSNames.append( player.GetPlayerName() )
}

//from the sns code lol
void function SetHighlight(entity player) {
	foreach ( entity player in GetPlayerArray() )
		Highlight_ClearEnemyHighlight(player)
	Highlight_SetEnemyHighlight( player, file.score_leader_highlight )
}

void function CheckNewHighlight(entity player) 
{
	while (IsValid(player)) //wait till disconnected player not exist
		wait 0.25
	
	entity winner = GetWinningPlayer()
	if (IsValid(winner))
		SetHighlight(winner)
}

entity function GetWinningPlayer() 
{
	entity bestplayer

	foreach ( entity player in GetPlayerArray() ) {
		if (bestplayer == null)
			bestplayer = player
		
		if (GameRules_GetTeamScore(player.GetTeam()) > GameRules_GetTeamScore(bestplayer.GetTeam()))
			bestplayer = player
	}

	return bestplayer
}

// yeah this fucking sucks, but at least i can now control how much it removes for each score without some rounding shit
int function GetPBScoreRemove(entity player){
int score = GameRules_GetTeamScore(player.GetTeam())
if(HMExtremePlayers.find(player)!=-1)
	return score
if(HMMediumPlayers.find(player)!=-1){
	switch(score){
		case(11): return 11
		case(12): return 11
		case(13): return 11
		case(14): return 12
		case(15): return 13
		case(16): return 13
		case(17): return 14
		case(18): return 15
		case(19): return 16
		case(20): return 16
		case(21): return 17
		case(22): return 17
		case(23): return 17
		case(24): return 18
		case(25): return 18
		case(26): return 19
		case(27): return 19
		case(28): return 19
		case(29): return 20
		case(30): return 20
		case(31): return 20
		case(32): return 21
		case(33): return 21
		case(34): return 21
		case(35): return 21
		case(36): return 22
		case(37): return 22
		case(38): return 22
		case(39): return 23
		case(40): return 23
		case(41): return 25
		case(42): return 26
		case(43): return 28
		case(44): return 28
		default: return 0
}
}
switch(score){
	case(11): return 10
	case(12): return 10
	case(13): return 10
	case(14): return 10
	case(15): return 11
	case(16): return 11
	case(17): return 11
	case(18): return 12
	case(19): return 12
	case(20): return 12
	case(21): return 13
	case(22): return 13
	case(23): return 13
	case(24): return 14
	case(25): return 14
	case(26): return 15
	case(27): return 15
	case(28): return 15
	case(29): return 16
	case(30): return 16
	case(31): return 16
	case(32): return 16
	case(33): return 17
	case(34): return 17
	case(35): return 18
	case(36): return 18
	case(37): return 19
	case(38): return 19
	case(39): return 19
	case(40): return 20
	case(41): return 20
	case(42): return 20
	case(43): return 20
	case(44): return 21
}
return 0
}